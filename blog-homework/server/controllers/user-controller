const {Users} = require("../models");
const bcrypt = require('bcrypt');
const saltRounds = 10;
const validator = require('email-validator');

module.exports = {

    createUser : async (req, res) => {
        const newUser = req.body; 
        try {
            const userExists = await Users.findAll({
                where: {
                    username: newUser.username
                }
            })
            
            if (userExists.length > 0){
               
                return res.status(400).json({message : "That username is already in use", user: true})
            }
            const emailExists = await Users.findAll({
                where: {
                    email: newUser.email
                }
            }) 
            if (emailExists.length > 0){ 
                return res.status(400).json({message : "That email is already in use", email: true})
            }
        
            bcrypt.hash(newUser.password, saltRounds, async (err, hash) => {
                if (err){
                    console.log(error);
                    res.status(500).json({message: "Internal Server Error"})
                }
                try {
                    newUser.password = hash;
                    const createdUser = await Users.create(newUser);
                    createdUser.password = null;
                    res.status(201).json(createdUser);
                } catch (error) {
                    console.log(error);
                    res.status(500).json({message: "Internal Server Error"})
                }
            })
        } catch (error) {
            console.log(error);
            res.status(500).json({message: "Internal Server Error"})
        }

    },
    findUserName: async(req, res) => {
        const newUser = req.body; 
        try {
            const userExists = await Users.findAll({
                where: {
                    username: newUser.username
                }
            })
            if (userExists.length > 0) {
                return res.status(200).json({exists: true})
            } else {
                return res.status(200).json({exists: false})
            }
        } catch (error) {
            console.log(error);
            res.status(500).json({message: "Internal Server Error"})
        }
    }, 
    findEmail: async(req, res) => {
        const newEmail = req.body; 
        try {
            const userExists = await Users.findAll({
                where: {
                    email: newEmail.email
                }
            })
            if (userExists.length > 0) {
                return res.status(200).json({exists: true})
            } else {
                return res.status(200).json({exists: false})
            }
        } catch (error) {
            console.log(error);
            res.status(500).json({message: "Internal Server Error"})
        }
    }, 
    login : async (req, res) => {
        const user = req.body.username;
        const pass = req.body.password;
        try {
            const userFound = await Users.findAll({
                where: {
                    username: user
                }
            })
            if (userFound.length > 0  ){
                bcrypt.compare(pass,  userFound[0].password, (error, response) => {
                    if (response){
                        userFound[0].password = null;
                        return res.status(200).json(userFound)
                    } else {
                        return res.status(400).json({message: "Incorrect username and password combination"})
                    }
                })
            } else {
                return res.status(400).json({message: "Incorrect username and password combination"})
            }
            
        } catch (error) {
            console.log(error);
            res.status(500).json({message: "Internal Server Error"})
        }

    }


}

function validateNewUser(user, req, res){
    let usernamePattern = /^[a-z0-9]*$/;
    let passwordPattern = 

    if (!validator.validate(user.email)) {
        res.status(400).send({
            message: "Must provide valid email address."
        });
        return false;
    }
    if (user.username.length > 20 || user.username.length < 4){

    }


}

